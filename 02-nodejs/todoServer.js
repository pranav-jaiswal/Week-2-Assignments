/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const port = 3000;
const app = express();
let todoList = [];
let counter = 0;

app.use(bodyParser.json());

function getTodo(todoId) {
  for(let i=0; i<todoList.length; i++) {
    let todo = todoList[i];
    if(todo.id === todoId) {
      console.log(todo);
      return todo;
    }
  }
}

function getAllTodos(req, res) {
  res.send(todoList);
}

function getTodoById(req, res) {
  //req.params.id is string so changed it to int
  let todoId = parseInt(req.params.id);
  let todo = getTodo(todoId);
  console.log(todoId);
  console.log(todo)
  if(todo === undefined) {
    res.status(404).send();
  } else {
    res.send(todo);
  }
}

function createTodo(req, res) {
  let todo = req.body;
  todo.id = counter;
  response = {
    id: counter
  }
  
  todoList.push(todo);
  console.log(todoList);
  counter++;
  res.status(201).send(response);
}

function editTodoById(req, res) {
  let idToUpdated = parseInt(req.params.id);
  let todo = getTodo(idToUpdated);
  todoList = todoList.filter((todo) => todo.id !== idToUpdated);
  if(todo === undefined) {
    res.status(404).send();
  } else {
    let reqBody = req.body;
    reqBody.id = idToUpdated;
    todoList.push(reqBody);
    console.log(todoList);
    res.status(200).send();
  }

}

function deleteTodoById(req, res) {
  let idToDelete = parseInt(req.params.id);
  let todo = getTodo(idToDelete);
  todoList = todoList.filter((todo) => todo.id !== idToDelete);
  console.log(todoList);
  if(todo === undefined) {
    res.status(404).send();
  } else {
    res.status(200).send();
  }
}

app.get('/todos', getAllTodos);
app.get('/todos/:id', getTodoById)
app.post('/todos', createTodo);
app.put('/todos/:id', editTodoById);
app.delete('/todos/:id', deleteTodoById);

app.listen(port, () => {
  console.log(`Todo App listening on port ${port}`)
})

module.exports = app;
